/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.servicemaster.internalFrames;

import com.servicemaster.data.SystemData;
import com.servicemaster.dialogs.ConfirmationDialog;
import com.servicemaster.dialogs.InformationDialog;
import com.servicemaster.forms.MainFrame;
import com.servicemaster.functions.AutoCompletion;
import com.servicemaster.functions.KeyCodeFunctions;
import com.servicemaster.guiFunctions.LableFunctions;
import com.servicemaster.models.Bom;
import com.servicemaster.models.BomItem;
import com.servicemaster.models.Item;
import com.servicemaster.models.Uom;
import com.servicemaster.utils.HibernateUtil;
import com.servicemaster.views.BomView;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author RuwanM
 */
public class BomFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form BomFrame
     */
    public BomFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tblAddedItemPopup = new javax.swing.JPopupMenu();
        itemDelete = new javax.swing.JMenuItem();
        itemEdit = new javax.swing.JMenuItem();
        txtBomCode = new javax.swing.JTextField();
        lblCodeSearch = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbMainItem = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cmbBomItem = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbUom = new javax.swing.JComboBox<>();
        lblAdd = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAddedBomItems = new javax.swing.JTable();
        lblClose = new javax.swing.JLabel();
        lblSave = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbxIsActive = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        txtRemark = new javax.swing.JTextField();

        itemDelete.setText("jMenuItem1");
        itemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDeleteActionPerformed(evt);
            }
        });
        tblAddedItemPopup.add(itemDelete);

        itemEdit.setText("jMenuItem1");
        itemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEditActionPerformed(evt);
            }
        });
        tblAddedItemPopup.add(itemEdit);

        setClosable(true);
        setTitle("BOM");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        txtBomCode.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        lblCodeSearch.setBackground(new java.awt.Color(150, 255, 150));
        lblCodeSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCodeSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        lblCodeSearch.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblCodeSearch.setOpaque(true);
        lblCodeSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCodeSearchMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCodeSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblCodeSearchMouseExited(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setText("BOM Code :");

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel2.setText("Item :");

        cmbMainItem.setEditable(true);
        cmbMainItem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)), "BOM Items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setText("Item :");

        cmbBomItem.setEditable(true);
        cmbBomItem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel4.setText("Quantity :");

        txtQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtQuantity.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQuantityFocusGained(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQuantityKeyPressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel5.setText("UOM :");

        cmbUom.setEditable(true);
        cmbUom.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        lblAdd.setBackground(new java.awt.Color(150, 255, 150));
        lblAdd.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAdd.setText("Add");
        lblAdd.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblAdd.setOpaque(true);
        lblAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblAddMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbBomItem, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbUom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(112, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbBomItem, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbUom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmbBomItem, jLabel3, jLabel4, txtQuantity});

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)), "Added Items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        tblAddedBomItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Quantity", "UOM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAddedBomItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAddedBomItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAddedBomItems);
        if (tblAddedBomItems.getColumnModel().getColumnCount() > 0) {
            tblAddedBomItems.getColumnModel().getColumn(0).setResizable(false);
            tblAddedBomItems.getColumnModel().getColumn(1).setResizable(false);
            tblAddedBomItems.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblAddedBomItems.getColumnModel().getColumn(2).setResizable(false);
            tblAddedBomItems.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        lblClose.setBackground(new java.awt.Color(150, 255, 150));
        lblClose.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblClose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClose.setText("Close");
        lblClose.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblClose.setOpaque(true);
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblCloseMouseExited(evt);
            }
        });

        lblSave.setBackground(new java.awt.Color(150, 255, 150));
        lblSave.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblSave.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSave.setText("Save");
        lblSave.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblSave.setOpaque(true);
        lblSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSaveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblSaveMouseExited(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel6.setText("Active :");

        cbxIsActive.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbxIsActive.setSelected(true);

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel7.setText("Remark :");

        txtRemark.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(4, 4, 4)
                        .addComponent(cbxIsActive)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblSave, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtBomCode, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblCodeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(cmbMainItem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtRemark)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel6, jLabel7});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCodeSearch)
                    .addComponent(txtBomCode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMainItem, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRemark, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbxIsActive))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbxIsActive, cmbMainItem, jLabel1, jLabel2, jLabel6, jLabel7, lblCodeSearch, txtBomCode, txtRemark});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblCodeSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCodeSearchMouseClicked
        String bomCode = txtBomCode.getText().trim();
        List boms = this.getBomByCode(bomCode, true);

        if (!boms.isEmpty()) {
            BomView bomView = new BomView(boms, this);
            MainFrame.desktopPane.add(bomView);
            bomView.setVisible(true);
        }
    }//GEN-LAST:event_lblCodeSearchMouseClicked

    private void lblCodeSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCodeSearchMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblCodeSearchMouseEntered

    private void lblCodeSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCodeSearchMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblCodeSearchMouseExited

    private void lblAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseClicked
        String itemName = (String) cmbBomItem.getSelectedItem();
        String quantity = txtQuantity.getText().trim();
        String uom = (String) cmbUom.getSelectedItem();

        if (itemName.isEmpty() || quantity.isEmpty() || uom.isEmpty()) {
            InformationDialog.showMessageBox("Please enter valid details", "Invalid");
        } else {
            DefaultTableModel tableModel = (DefaultTableModel) tblAddedBomItems.getModel();
            Item item = itemMap.get(itemName);
            tableModel.addRow(new String[]{item.getItemCode(), itemName, quantity, uom});

            cmbBomItem.setSelectedIndex(0);
            txtQuantity.setText("");
            cmbUom.setSelectedIndex(0);
            cmbBomItem.requestFocus();
        }
    }//GEN-LAST:event_lblAddMouseClicked

    private void lblAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblAddMouseEntered

    private void lblAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblAddMouseExited

    private void lblCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseClicked
        ConfirmationDialog.showMessageBox("Are you sure?", "Sure");
        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_lblCloseMouseClicked

    private void lblCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblCloseMouseEntered

    private void lblCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblCloseMouseExited

    private void lblSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaveMouseClicked
        if (this.validateInputs()) {
            if (txtBomCode.getText().isEmpty()) {
                Item item = itemMap.get((String) cmbMainItem.getSelectedItem());
                List boms = this.getBomByItem(item, false);
                if (boms.isEmpty()) {
                    ConfirmationDialog.showMessageBox("BOM not exist. Create new one?", "New");
                    if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
                        KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
                        this.saveOrUpdateBom(keyCodeFunctions.getKey("BOM", "Bill of metirial codes"), false);
                    }
                } else {
                    InformationDialog.showMessageBox("BOM already exists for selected itme", "Exist");
                }
            } else {
                List boms = this.getBomByCode(txtBomCode.getText().trim(), false);
                if (boms.isEmpty()) {
                    InformationDialog.showMessageBox("Invalid BOM code. Please try again", "Invalid");
                } else {
                    for (Object object : boms) {
                        if (object instanceof Bom) {
                            this.saveOrUpdateBom(((Bom) object).getBomCode(), false);
                        }
                    }
                }
            }
        } else {
            InformationDialog.showMessageBox("Please enter valid details", "Invalid");
        }
    }//GEN-LAST:event_lblSaveMouseClicked

    public boolean validateInputs() {
        return !(((String) cmbMainItem.getSelectedItem()).isEmpty()
                || tblAddedBomItems.getModel().getRowCount() == 0);
    }

    private void lblSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaveMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblSaveMouseEntered

    private void lblSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaveMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblSaveMouseExited

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        AutoCompletion.enable(cmbMainItem, cmbBomItem);
        AutoCompletion.enable(cmbBomItem, txtQuantity);
        AutoCompletion.enable(cmbUom, lblAdd);

        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        loadItems(session);
        loadUom(session);

        transaction.commit();
        session.close();
    }//GEN-LAST:event_formInternalFrameOpened

    private void txtQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbUom.requestFocus();
        }
    }//GEN-LAST:event_txtQuantityKeyPressed

    private void txtQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantityFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtQuantity.selectAll();
            }
        });
    }//GEN-LAST:event_txtQuantityFocusGained

    private void itemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEditActionPerformed
        int selectedRow = tblAddedBomItems.getSelectedRow();
        if (selectedRow == -1) {
            InformationDialog.showMessageBox("Please select a valid item", "Invalid");
        } else {
            String itemName = tblAddedBomItems.getValueAt(selectedRow, 1).toString();
            String quantity = tblAddedBomItems.getValueAt(selectedRow, 2).toString();
            String uom = tblAddedBomItems.getValueAt(selectedRow, 3).toString();

            ((DefaultTableModel) tblAddedBomItems.getModel()).removeRow(selectedRow);

            cmbBomItem.setSelectedItem(itemName);
            txtQuantity.setText(quantity);
            cmbUom.setSelectedItem(uom);

            txtQuantity.requestFocus();
        }
    }//GEN-LAST:event_itemEditActionPerformed

    private void tblAddedBomItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAddedBomItemsMouseClicked
        if (evt.getButton() == 3) {
            int row = tblAddedBomItems.rowAtPoint(evt.getPoint());
            int column = tblAddedBomItems.columnAtPoint(evt.getPoint());
            tblAddedBomItems.changeSelection(row, column, false, false);
            tblAddedItemPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblAddedBomItemsMouseClicked

    private void itemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDeleteActionPerformed
        int selectedRow = tblAddedBomItems.getSelectedRow();
        if (selectedRow == -1) {
            InformationDialog.showMessageBox("Please select a valid item", "Invalid");
        } else {
            ((DefaultTableModel) tblAddedBomItems.getModel()).removeRow(selectedRow);
        }
    }//GEN-LAST:event_itemDeleteActionPerformed

    private void loadItems(Session session) {
        cmbMainItem.removeAllItems();
        cmbMainItem.addItem("");
        cmbBomItem.removeAllItems();
        cmbBomItem.addItem("");
        Query query = session.createQuery("from Item i order by i.itemName");
        List list = query.list();
        if (!list.isEmpty()) {
            for (Object object : list) {
                if (object instanceof Item) {
                    Item item = (Item) object;
                    String itemName = item.getItemName();
                    cmbMainItem.addItem(itemName);
                    cmbBomItem.addItem(itemName);
                    itemMap.put(itemName, item);
                }
            }
        }
    }

    private void loadUom(Session session) {
        cmbUom.removeAllItems();
        cmbUom.addItem("");
        Query query = session.createQuery("from Uom u order by u.uomSymble");
        List list = query.list();
        if (!list.isEmpty()) {
            for (Object object : list) {
                if (object instanceof Uom) {
                    Uom uom = (Uom) object;
                    String uomSymble = uom.getUomSymble();
                    cmbUom.addItem(uomSymble);
                    uomMap.put(uomSymble, uom);
                }
            }
        }
    }

    public void setBomCode(String bomCode) {
        this.txtBomCode.setText(bomCode);
    }

    public void setMainItem(String item) {
        this.cmbMainItem.setSelectedItem(item);
    }

    public void setRemark(String remark) {
        this.txtRemark.setText(remark);
    }

    public void setIsActive(boolean isActive) {
        this.cbxIsActive.setSelected(isActive);
    }

    public void setAddedItems(List bomItems) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        if (!bomItems.isEmpty()) {
            DefaultTableModel tableModel = (DefaultTableModel) tblAddedBomItems.getModel();
            tableModel.setRowCount(0);
            for (Object object : bomItems) {
                if (object instanceof BomItem) {
                    BomItem bomItem = (BomItem) object;

                    Item item = (Item) session.createCriteria(Item.class)
                            .add(Restrictions.eq("itemCode", bomItem.getItem().getItemCode()))
                            .uniqueResult();

                    Uom uom = (Uom) session.createCriteria(Uom.class)
                            .add(Restrictions.eq("uomCode", bomItem.getUom().getUomCode()))
                            .uniqueResult();
                    tableModel.addRow(new Object[]{item.getItemCode(), item.getItemName(), bomItem.getBomItemQuantity(), uom.getUomSymble()});
                }
            }
        }
    }

    public void setBomCodeEditable(boolean editable) {
        this.txtBomCode.setEditable(editable);
    }

    public void setMainItemEditable(boolean editable) {
        this.cmbMainItem.setEnabled(editable);
    }

    public void setLblSaveText(String text) {
        this.lblSave.setText(text);
    }

    private List getBomByCode(String bomCode, boolean like) {
//        Query query;
//        if (like) {
//            query = session.createQuery("from Bom b join fetch b.item where b.bomCode like :code");
//            query.setParameter("code", "%" + bomCode + "%");
//        } else {
//            query = session.createQuery("from Bom b join fetch b.item where b.bomCode = :code");
//            query.setParameter("code", bomCode);
//        }
//        List list = query.list();
//        for (Object object : list) {
//            if (object instanceof Bom) {
//                Bom tempBom = (Bom) object;
//                Hibernate.initialize(tempBom.getBomItems());
//
//                Set bomItems = tempBom.getBomItems();
//                for (Object tempBomItem : bomItems) {
//                    if (tempBomItem instanceof BomItem) {
//                        BomItem bomItem = (BomItem) tempBomItem;
//                        Hibernate.initialize(bomItem.getItem());
//                    }
//                }
//            }
//        }
        if (like) {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Criteria likeCriteria = session.createCriteria(Bom.class);
            likeCriteria.add(Restrictions.like("bomCode", "%" + bomCode + "%"));
            List likeList = likeCriteria.list();
            session.getTransaction().commit();
            session.close();
            return likeList;
        } else {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Criteria equalCriteria = session.createCriteria(Bom.class);
            equalCriteria.add(Restrictions.eq("bomCode", bomCode));
            List equalList = equalCriteria.list();
            session.getTransaction().commit();
            session.close();
            return equalList;
        }
    }

    private List getBomByItem(Item item, boolean like) {
//        Session session = HibernateUtil.getSessionFactory().openSession();
//        session.beginTransaction();
//        Query query;
//        if (like) {
//            query = session.createQuery("from Bom b join fetch b.item where b.item like :code");
//            query.setParameter("code", "%" + item + "%");
//        } else {
//            query = session.createQuery("from Bom b join fetch b.item where b.item = :code");
//            query.setParameter("code", item);
//        }
//        List list = query.list();
//        for (Object object : list) {
//            if (object instanceof Bom) {
//                Bom tempBom = (Bom) object;
//                Hibernate.initialize(tempBom.getBomItems());
//
//                Set bomItems = tempBom.getBomItems();
//                for (Object tempBomItem : bomItems) {
//                    if (tempBomItem instanceof BomItem) {
//                        BomItem bomItem = (BomItem) tempBomItem;
//                        Hibernate.initialize(bomItem.getItem());
//                    }
//                }
//            }
//        }
//        session.getTransaction().commit();
//        session.close();
//        return list;
        if (like) {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Criteria likeCriteria = session.createCriteria(Bom.class);
            likeCriteria.add(Restrictions.like("item", item));
            List likeList = likeCriteria.list();
            session.getTransaction().commit();
            session.close();
            return likeList;
        } else {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Criteria equalCriteria = session.createCriteria(Bom.class);
            equalCriteria.add(Restrictions.eq("item", item));
            List equalList = equalCriteria.list();
            session.getTransaction().commit();
            session.close();
            return equalList;
        }
    }

    public void saveOrUpdateBom(String bomCode, boolean update) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        Date date = new Date();

        Bom bom = new Bom();
        bom.setBomCode(bomCode);
        bom.setBomName((String) cmbMainItem.getSelectedItem());
        bom.setRemark(txtRemark.getText().toUpperCase().trim());
        bom.setIsActive(cbxIsActive.isSelected() ? 1 : 0);
        bom.setItem(itemMap.get((String) cmbMainItem.getSelectedItem()));

        if (update) {
            bom.setModifiedDate(date);
            bom.setModifiedTime(date);
            bom.setModifiedUser(MainFrame.user.getUserId());
        } else {
            bom.setCreatedDate(date);
            bom.setCreatedTime(date);
            bom.setCreatedUser(MainFrame.user.getUserId());
        }

        session.saveOrUpdate(bom);

        Set bomItems = bom.getBomItems();

        if (bomItems.isEmpty()) {
            DefaultTableModel tableModel = (DefaultTableModel) tblAddedBomItems.getModel();
            KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                BomItem bomItem = new BomItem();
                bomItem.setBom(bom);
                bomItem.setBomItemCode(keyCodeFunctions.getKey("BOI", "Bill of metirial item code"));
                bomItem.setItem(itemMap.get((String) tableModel.getValueAt(i, 1)));
                bomItem.setBomItemQuantity(Float.parseFloat(tableModel.getValueAt(i, 2).toString()));
                bomItem.setRemark("");
                bomItem.setUom(uomMap.get((String) tableModel.getValueAt(i, 3)));

                if (update) {
                    bomItem.setModifiedDate(date);
                    bomItem.setModifiedTime(date);
                    bomItem.setModifiedUser(MainFrame.user.getUserId());
                } else {
                    bomItem.setCreatedDate(date);
                    bomItem.setCreatedTime(date);
                    bomItem.setCreatedUser(MainFrame.user.getUserId());
                }

                session.saveOrUpdate(bomItem);
            }
        }

        transaction.commit();
        session.close();

        if (update) {
            InformationDialog.showMessageBox("Successfully updated", "Success");
        } else {
            InformationDialog.showMessageBox("New entry created successfully", "Success");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbxIsActive;
    private javax.swing.JComboBox<String> cmbBomItem;
    private javax.swing.JComboBox<String> cmbMainItem;
    private javax.swing.JComboBox<String> cmbUom;
    private javax.swing.JMenuItem itemDelete;
    private javax.swing.JMenuItem itemEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAdd;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblCodeSearch;
    private javax.swing.JLabel lblSave;
    private javax.swing.JTable tblAddedBomItems;
    private javax.swing.JPopupMenu tblAddedItemPopup;
    private javax.swing.JTextField txtBomCode;
    private javax.swing.JFormattedTextField txtQuantity;
    private javax.swing.JTextField txtRemark;
    // End of variables declaration//GEN-END:variables
    private final TreeMap<String, Item> itemMap = new TreeMap<>();
    private final TreeMap<String, Uom> uomMap = new TreeMap<>();
}
