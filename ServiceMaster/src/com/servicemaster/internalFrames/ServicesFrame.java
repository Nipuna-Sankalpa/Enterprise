/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.servicemaster.internalFrames;

import com.servicemaster.data.SystemData;
import com.servicemaster.forms.MainFrame;
import com.servicemaster.guiFunctions.LableFunctions;
import com.servicemaster.models.BusinessAddress;
import com.servicemaster.models.Invoice;
import com.servicemaster.models.Service;
import com.servicemaster.models.ServiceHasItem;
import com.servicemaster.models.ServiceStatus;
import com.servicemaster.models.Vehicle;
import com.servicemaster.utils.HibernateUtil;
import java.awt.Color;
import java.awt.Component;
import java.beans.PropertyVetoException;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import org.hibernate.Criteria;
import org.hibernate.Hibernate;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author RuwanM
 */
public class ServicesFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form SeviceFrame
     */
    public ServicesFrame() {
        initComponents();

        DefaultListModel<String> listModel = new DefaultListModel<>();
        listModel.addElement("No services available");
        listServices.setModel(listModel);
        listServices.setCellRenderer(this.getListCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        toolbarPanel = new javax.swing.JPanel();
        lblNewService = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        desktopPane = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listServices = new javax.swing.JList<>();
        lblOpen = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Services");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        toolbarPanel.setOpaque(false);

        lblNewService.setBackground(new java.awt.Color(150, 255, 150));
        lblNewService.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblNewService.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNewService.setText("New Service");
        lblNewService.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblNewService.setMaximumSize(new java.awt.Dimension(90, 35));
        lblNewService.setMinimumSize(new java.awt.Dimension(90, 35));
        lblNewService.setOpaque(true);
        lblNewService.setPreferredSize(new java.awt.Dimension(90, 35));
        lblNewService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNewServiceMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblNewServiceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblNewServiceMouseExited(evt);
            }
        });

        javax.swing.GroupLayout toolbarPanelLayout = new javax.swing.GroupLayout(toolbarPanel);
        toolbarPanel.setLayout(toolbarPanelLayout);
        toolbarPanelLayout.setHorizontalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolbarPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lblNewService, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(677, Short.MAX_VALUE))
        );
        toolbarPanelLayout.setVerticalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, toolbarPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblNewService, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        toolbar.add(toolbarPanel);

        jSplitPane1.setDividerLocation(100);

        desktopPane.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 678, Short.MAX_VALUE)
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(desktopPane);

        listServices.setBackground(new java.awt.Color(150, 255, 150));
        listServices.setSelectionBackground(new java.awt.Color(50, 255, 50));
        listServices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listServicesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listServices);

        lblOpen.setBackground(new java.awt.Color(150, 255, 150));
        lblOpen.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblOpen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOpen.setText("Open");
        lblOpen.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblOpen.setOpaque(true);
        lblOpen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblOpenMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblOpenMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblOpenMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(lblOpen, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jSplitPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblNewServiceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewServiceMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblNewServiceMouseEntered

    private void lblNewServiceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewServiceMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblNewServiceMouseExited

    private void lblNewServiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewServiceMouseClicked
        try {
            if (this.serviceFrame != null) {
                JOptionPane.showMessageDialog(this, "Please save and close opened service.", "Close", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.serviceFrame = new ServiceFrame(null, this);
                desktopPane.add(serviceFrame);
                serviceFrame.setMaximum(true);

                BasicInternalFrameUI internalFrameUI = (BasicInternalFrameUI) serviceFrame.getUI();
                internalFrameUI.setNorthPane(null);
                serviceFrame.setBorder(null);

                serviceFrame.setVisible(true);
            }
        } catch (PropertyVetoException ex) {
            Logger.getLogger(ServicesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_lblNewServiceMouseClicked

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        this.loadServices();
    }//GEN-LAST:event_formInternalFrameOpened

    private void listServicesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listServicesMouseClicked
        if (evt.getClickCount() == 2) {
            this.openService();
        }
    }//GEN-LAST:event_listServicesMouseClicked

    private void lblOpenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOpenMouseClicked
        if (listServices.getSelectedValue() != null) {
            this.openService();
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid vehicle.", "Invalid", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_lblOpenMouseClicked

    private void lblOpenMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOpenMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblOpenMouseEntered

    private void lblOpenMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOpenMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblOpenMouseExited

    public void loadServices() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        
        Criteria serviceCriteria = session.createCriteria(Service.class);
        serviceCriteria.add(Restrictions.ne("serviceStatus", session.load(ServiceStatus.class, new ServiceStatus(5).getStatusId())));
        serviceCriteria.add(Restrictions.ne("serviceStatus", session.load(ServiceStatus.class, new ServiceStatus(6).getStatusId())));

        List list = serviceCriteria.list();

        DefaultListModel<String> listModel = (DefaultListModel<String>) listServices.getModel();
        listModel.clear();

        if (!list.isEmpty()) {
            for (Object object : list) {
                if (object instanceof Service) {
                    Service service = (Service) object;
                    Vehicle vehicle = service.getVehicle();

                    Hibernate.initialize(vehicle.getBusinessPartner());
                    Hibernate.initialize(service.getServiceBay());
                    Hibernate.initialize(service.getVehicle());
                    Hibernate.initialize(service.getServiceStatus());

                    Set addresses = vehicle.getBusinessPartner().getBusinessAddresses();
                    for (Object tempAddresse : addresses) {
                        if (tempAddresse instanceof BusinessAddress) {
                            BusinessAddress businessAddress = (BusinessAddress) tempAddresse;
                            Hibernate.initialize(businessAddress.getAddress());
                        }
                    }

                    Set serviseItems = service.getServiceHasItems();
                    for (Object tempServiceItem : serviseItems) {
                        if (tempServiceItem instanceof ServiceHasItem) {
                            ServiceHasItem serviceHasItem = (ServiceHasItem) tempServiceItem;
                            Hibernate.initialize(serviceHasItem);
                            Hibernate.initialize(serviceHasItem.getItem());
                        }
                    }
                    
                    Set invoices = service.getInvoices();
                    for (Object tempInvoice : invoices) {
                        if (tempInvoice instanceof Invoice) {
                            Invoice invoice = (Invoice) tempInvoice;
                            Hibernate.initialize(invoice);
                        }
                    }

                    listModel.addElement(vehicle.getVehicleNumber());
                    serviceMap.put(vehicle.getVehicleNumber(), service);
                }
            }
        }

        session.close();
    }

    private void openService() {
        try {
            String value = listServices.getSelectedValue();
            Service service = serviceMap.get(value);

            if (serviceFrame != null) {
                JOptionPane.showMessageDialog(this, "Please save and close opened service.", "Close", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.serviceFrame = new ServiceFrame(service, this);
                desktopPane.add(serviceFrame);
                serviceFrame.setMaximum(true);

                BasicInternalFrameUI internalFrameUI = (BasicInternalFrameUI) serviceFrame.getUI();
                internalFrameUI.setNorthPane(null);
                serviceFrame.setBorder(null);

                serviceFrame.setVisible(true);
            }
            listServices.clearSelection();
        } catch (PropertyVetoException ex) {
            Logger.getLogger(ServicesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private ListCellRenderer<? super String> getListCellRenderer() {
        return new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list,
                    Object value, int index, boolean isSelected,
                    boolean cellHasFocus) {
                JLabel listCellRendererComponent = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                listCellRendererComponent.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, new Color(50, 255, 50)));
                return listCellRendererComponent;
            }
        };
    }

    public void setServiceFrame(ServiceFrame serviceFrame) {
        this.serviceFrame = serviceFrame;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblNewService;
    private javax.swing.JLabel lblOpen;
    private javax.swing.JList<String> listServices;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables
    private final TreeMap<String, Service> serviceMap = new TreeMap<>();
    private ServiceFrame serviceFrame;
}
