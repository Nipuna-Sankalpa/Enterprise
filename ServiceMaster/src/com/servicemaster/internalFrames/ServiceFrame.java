/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.servicemaster.internalFrames;

import com.servicemaster.data.SystemData;
import com.servicemaster.dialogs.ConfirmationDialog;
import com.servicemaster.dialogs.InformationDialog;
import com.servicemaster.dialogs.SettlementDialog;
import com.servicemaster.forms.MainFrame;
import com.servicemaster.functions.AutoCompletion;
import com.servicemaster.functions.JdbcConnection;
import com.servicemaster.functions.KeyCodeFunctions;
import com.servicemaster.guiFunctions.LableFunctions;
import com.servicemaster.models.Address;
import com.servicemaster.models.Bom;
import com.servicemaster.models.BomItem;
import com.servicemaster.models.BusinessAddress;
import com.servicemaster.models.BusinessPartner;
import com.servicemaster.models.BusinessTelephone;
import com.servicemaster.models.Invoice;
import com.servicemaster.models.Item;
import com.servicemaster.models.Service;
import com.servicemaster.models.ServiceBay;
import com.servicemaster.models.ServiceHasItem;
import com.servicemaster.models.ServiceHasItemStatus;
import com.servicemaster.models.ServiceStatus;
import com.servicemaster.models.Vehicle;
import com.servicemaster.timers.FocusTimer;
import com.servicemaster.utils.HibernateUtil;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.Hibernate;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author RuwanM
 */
public class ServiceFrame extends javax.swing.JInternalFrame {

    private final ServicesFrame servicesFrame;

    /**
     * Creates new form ServiceFrame
     *
     * @param service
     * @param servicesFrame
     */
    public ServiceFrame(Service service, ServicesFrame servicesFrame) {
        initComponents();
        this.service = service;
        this.servicesFrame = servicesFrame;

        AutoCompletion.enable(cmbVehicle, txtLastServicesMilage);
        AutoCompletion.enable(cmbServiceBay, cmbItems);
        AutoCompletion.enable(cmbItems, txtQuantity);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        discountGroup = new javax.swing.ButtonGroup();
        tblItemPopup = new javax.swing.JPopupMenu();
        itemDelete = new javax.swing.JMenuItem();
        itemEdit = new javax.swing.JMenuItem();
        mainPanel = new javax.swing.JPanel();
        detailPanel = new javax.swing.JPanel();
        vehicleDetailPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtLastServicesMilage = new javax.swing.JTextField();
        cmbVehicle = new javax.swing.JComboBox<>();
        lblNew = new javax.swing.JLabel();
        lblRefresh = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        dateServiceDate = new com.toedter.calendar.JDateChooser();
        customerDetailPanel = new javax.swing.JPanel();
        lblAddress3 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblCustomerName = new javax.swing.JLabel();
        lblAddress1 = new javax.swing.JLabel();
        lblAddress2 = new javax.swing.JLabel();
        ServiceDetailPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtGrandSubTotal = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        txtGrandDiscount = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        txtGrandTotal = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        cmbServiceBay = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        txtServiceStatus = new javax.swing.JTextField();
        itemPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cmbItems = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JFormattedTextField();
        rbtPercentage = new javax.swing.JRadioButton();
        rbtNumber = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        buttonPanel = new javax.swing.JPanel();
        lblClose = new javax.swing.JLabel();
        lblSave = new javax.swing.JLabel();
        lblPrint = new javax.swing.JLabel();
        lblSettle = new javax.swing.JLabel();

        itemDelete.setText("Delete");
        itemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDeleteActionPerformed(evt);
            }
        });
        tblItemPopup.add(itemDelete);

        itemEdit.setText("Edit");
        itemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEditActionPerformed(evt);
            }
        });
        tblItemPopup.add(itemEdit);

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        detailPanel.setLayout(new java.awt.GridLayout(1, 0));

        vehicleDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)), "Vehicle Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setText("Vehicle No :");

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel2.setText("Last service milage :");

        txtLastServicesMilage.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtLastServicesMilage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLastServicesMilageKeyPressed(evt);
            }
        });

        cmbVehicle.setEditable(true);
        cmbVehicle.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbVehicle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbVehicleItemStateChanged(evt);
            }
        });
        cmbVehicle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbVehicleFocusGained(evt);
            }
        });

        lblNew.setBackground(new java.awt.Color(150, 255, 150));
        lblNew.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblNew.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNew.setText("New");
        lblNew.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblNew.setOpaque(true);
        lblNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNewMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblNewMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblNewMouseExited(evt);
            }
        });

        lblRefresh.setBackground(new java.awt.Color(150, 255, 150));
        lblRefresh.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblRefresh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRefresh.setText("Refresh");
        lblRefresh.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblRefresh.setOpaque(true);
        lblRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRefreshMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblRefreshMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblRefreshMouseExited(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel12.setText("Date : ");

        dateServiceDate.setDate(new Date());
        dateServiceDate.setDateFormatString("yyyy-MM-dd");
        dateServiceDate.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        javax.swing.GroupLayout vehicleDetailPanelLayout = new javax.swing.GroupLayout(vehicleDetailPanel);
        vehicleDetailPanel.setLayout(vehicleDetailPanelLayout);
        vehicleDetailPanelLayout.setHorizontalGroup(
            vehicleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehicleDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(vehicleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(vehicleDetailPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbVehicle, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(vehicleDetailPanelLayout.createSequentialGroup()
                        .addGroup(vehicleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(vehicleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLastServicesMilage, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(dateServiceDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNew, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        vehicleDetailPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2});

        vehicleDetailPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbVehicle, txtLastServicesMilage});

        vehicleDetailPanelLayout.setVerticalGroup(
            vehicleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehicleDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(vehicleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNew, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vehicleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtLastServicesMilage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vehicleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(dateServiceDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        vehicleDetailPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmbVehicle, dateServiceDate, jLabel1, jLabel12, jLabel2, lblNew, txtLastServicesMilage});

        detailPanel.add(vehicleDetailPanel);

        customerDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)), "Customer Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        lblAddress3.setBackground(new java.awt.Color(255, 255, 255));
        lblAddress3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblAddress3.setOpaque(true);

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setText("Customer Name :");

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel4.setText("Address :");

        lblCustomerName.setBackground(new java.awt.Color(255, 255, 255));
        lblCustomerName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblCustomerName.setOpaque(true);

        lblAddress1.setBackground(new java.awt.Color(255, 255, 255));
        lblAddress1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblAddress1.setOpaque(true);

        lblAddress2.setBackground(new java.awt.Color(255, 255, 255));
        lblAddress2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblAddress2.setOpaque(true);

        javax.swing.GroupLayout customerDetailPanelLayout = new javax.swing.GroupLayout(customerDetailPanel);
        customerDetailPanel.setLayout(customerDetailPanelLayout);
        customerDetailPanelLayout.setHorizontalGroup(
            customerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerDetailPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(customerDetailPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(customerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddress2)
                            .addComponent(lblAddress1)
                            .addComponent(lblAddress3))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        customerDetailPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel3, jLabel4});

        customerDetailPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAddress1, lblAddress2, lblAddress3, lblCustomerName});

        customerDetailPanelLayout.setVerticalGroup(
            customerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customerDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(lblAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblAddress3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        detailPanel.add(customerDetailPanel);

        ServiceDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)), "Service Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel5.setText("Sub Total :");

        txtGrandSubTotal.setEditable(false);
        txtGrandSubTotal.setBackground(new java.awt.Color(255, 255, 255));
        txtGrandSubTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtGrandSubTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtGrandSubTotal.setText("0.00");
        txtGrandSubTotal.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel6.setText("Discount :");

        txtGrandDiscount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtGrandDiscount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtGrandDiscount.setText("0.00");
        txtGrandDiscount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel7.setText("Grand Total :");

        txtGrandTotal.setEditable(false);
        txtGrandTotal.setBackground(new java.awt.Color(255, 255, 255));
        txtGrandTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtGrandTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtGrandTotal.setText("0.00");
        txtGrandTotal.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel11.setText("Service Bay :");

        cmbServiceBay.setEditable(true);
        cmbServiceBay.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel13.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel13.setText("Service Status :");

        txtServiceStatus.setEditable(false);
        txtServiceStatus.setBackground(new java.awt.Color(255, 255, 255));
        txtServiceStatus.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        javax.swing.GroupLayout ServiceDetailPanelLayout = new javax.swing.GroupLayout(ServiceDetailPanel);
        ServiceDetailPanel.setLayout(ServiceDetailPanelLayout);
        ServiceDetailPanelLayout.setHorizontalGroup(
            ServiceDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServiceDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbServiceBay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtServiceStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGrandSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGrandDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ServiceDetailPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel5, jLabel6, jLabel7});

        ServiceDetailPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbServiceBay, txtServiceStatus});

        ServiceDetailPanelLayout.setVerticalGroup(
            ServiceDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServiceDetailPanelLayout.createSequentialGroup()
                .addGroup(ServiceDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ServiceDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtGrandSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(txtGrandDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(txtGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ServiceDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ServiceDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txtServiceStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(ServiceDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cmbServiceBay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        ServiceDetailPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmbServiceBay, jLabel11, jLabel13, jLabel5, jLabel6, jLabel7, txtGrandDiscount, txtGrandSubTotal, txtGrandTotal, txtServiceStatus});

        itemPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)), "Items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel8.setText("Item Name :");

        cmbItems.setEditable(true);
        cmbItems.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel9.setText("Quantity :");

        txtQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        txtQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtQuantity.setText("0.0");
        txtQuantity.setToolTipText("");
        txtQuantity.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtQuantity.setNextFocusableComponent(txtGrandDiscount);
        txtQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQuantityFocusGained(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQuantityKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel10.setText("Discount :");

        txtDiscount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        txtDiscount.setText("0.0");
        txtDiscount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtDiscount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDiscountFocusGained(evt);
            }
        });
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountKeyPressed(evt);
            }
        });

        discountGroup.add(rbtPercentage);
        rbtPercentage.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rbtPercentage.setSelected(true);
        rbtPercentage.setText("%");
        rbtPercentage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rbtPercentageKeyPressed(evt);
            }
        });

        discountGroup.add(rbtNumber);
        rbtNumber.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rbtNumber.setText("#");
        rbtNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rbtNumberKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout itemPanelLayout = new javax.swing.GroupLayout(itemPanel);
        itemPanel.setLayout(itemPanelLayout);
        itemPanelLayout.setHorizontalGroup(
            itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbItems, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rbtPercentage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtNumber)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        itemPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel10, jLabel8, jLabel9});

        itemPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtDiscount, txtQuantity});

        itemPanelLayout.setVerticalGroup(
            itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemPanelLayout.createSequentialGroup()
                .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbtPercentage)
                    .addComponent(rbtNumber))
                .addContainerGap())
        );

        itemPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmbItems, jLabel10, jLabel8, jLabel9, txtDiscount, txtQuantity});

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Quantity", "Unit Price", "Sub Total", "Discount", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblItems);
        if (tblItems.getColumnModel().getColumnCount() > 0) {
            tblItems.getColumnModel().getColumn(0).setResizable(false);
            tblItems.getColumnModel().getColumn(1).setResizable(false);
            tblItems.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblItems.getColumnModel().getColumn(2).setResizable(false);
            tblItems.getColumnModel().getColumn(3).setResizable(false);
            tblItems.getColumnModel().getColumn(4).setResizable(false);
            tblItems.getColumnModel().getColumn(5).setResizable(false);
            tblItems.getColumnModel().getColumn(6).setResizable(false);
        }

        lblClose.setBackground(new java.awt.Color(150, 255, 150));
        lblClose.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblClose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClose.setText("Close");
        lblClose.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblClose.setOpaque(true);
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblCloseMouseExited(evt);
            }
        });

        lblSave.setBackground(new java.awt.Color(150, 255, 150));
        lblSave.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblSave.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSave.setText("Update");
        lblSave.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblSave.setOpaque(true);
        lblSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSaveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblSaveMouseExited(evt);
            }
        });

        lblPrint.setBackground(new java.awt.Color(150, 255, 150));
        lblPrint.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblPrint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrint.setText("Invoice");
        lblPrint.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblPrint.setOpaque(true);
        lblPrint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPrintMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblPrintMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblPrintMouseExited(evt);
            }
        });

        lblSettle.setBackground(new java.awt.Color(150, 255, 150));
        lblSettle.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblSettle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSettle.setText("Settle");
        lblSettle.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblSettle.setEnabled(false);
        lblSettle.setOpaque(true);
        lblSettle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSettleMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblSettleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblSettleMouseExited(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSave, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buttonPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblClose, lblPrint, lblSave, lblSettle});

        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblClose, lblPrint, lblSave, lblSettle});

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(detailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(ServiceDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(itemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(detailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ServiceDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ServiceDetailPanel, itemPanel});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseClicked
        ConfirmationDialog.showMessageBox("Are you sure?", "Sure");
        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
            servicesFrame.setServiceFrame(null);
            this.servicesFrame.loadServices();
            this.dispose();
        }
    }//GEN-LAST:event_lblCloseMouseClicked

    private void lblCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblCloseMouseEntered

    private void lblCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblCloseMouseExited

    private void lblSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaveMouseClicked
        if (service != null) {
            Date date = dateServiceDate.getDate();

            service.setMilage(Float.parseFloat(txtLastServicesMilage.getText().trim()));
            service.setSubTotal(grandSubTotal);
            service.setDiscount(grandDiscount);
            service.setGrandTotal(grandTotal);
            if (grandDiscount > 0.0) {
                service.setDiscounted(1);
            } else {
                service.setDiscounted(0);
            }
            service.setModifiedDate(date);
            service.setModifiedTime(date);
            service.setModifiedUser(MainFrame.user.getUserId());
            service.setServiceBay(serviceBayMap.get(((String) cmbServiceBay.getSelectedItem()).trim()));
            service.setVehicle(vehicleMap.get(((String) cmbVehicle.getSelectedItem()).trim()));
            service.setServiceStatus(serviceStatusMap.get("OPEN"));

            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();

            session.saveOrUpdate(service);

            DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String itemName = (String) tblItems.getValueAt(i, 1);
                float quantity = (float) tblItems.getValueAt(i, 2);
                float subTotal = (float) tblItems.getValueAt(i, 4);
                float discount = (float) tblItems.getValueAt(i, 5);
                float itemTotal = (float) tblItems.getValueAt(i, 6);

                ServiceHasItem serviceHasItem = serviceHasItemMap.get(itemName);
                serviceHasItem.setQuantity(quantity);
                serviceHasItem.setSubTotal(subTotal);
                serviceHasItem.setDiscount(discount);
                serviceHasItem.setTotal(itemTotal);
                serviceHasItem.setServiceHasItemStatus(this.serviceHasItemStatusMap.get(0));
                serviceHasItem.setModifiedDate(date);
                serviceHasItem.setModifiedTime(date);
                serviceHasItem.setModifiedUser(MainFrame.user.getUserId());
                serviceHasItem.setRemark(itemName);

                session.saveOrUpdate(serviceHasItem);
            }

            session.getTransaction().commit();
            session.close();
        } else {
            KeyCodeFunctions codeFunctions = new KeyCodeFunctions();
            String serviceCode = codeFunctions.getKey("SVR", "Service");
            Date date = dateServiceDate.getDate();

            service = new Service();
            service.setServiceCode(serviceCode);
            service.setMilage(Float.parseFloat(txtLastServicesMilage.getText().trim()));
            service.setSubTotal(grandSubTotal);
            service.setDiscount(grandDiscount);
            service.setGrandTotal(grandTotal);
            if (grandDiscount > 0.0) {
                service.setDiscounted(1);
            } else {
                service.setDiscounted(0);
            }
            service.setCreatedDate(date);
            service.setCreatedTime(date);
            service.setCreatedUser(MainFrame.user.getUserId());
            service.setServiceBay(serviceBayMap.get(((String) cmbServiceBay.getSelectedItem()).trim()));
            service.setVehicle(vehicleMap.get(((String) cmbVehicle.getSelectedItem()).trim()));
            service.setServiceStatus(serviceStatusMap.get("OPEN"));

            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();

            session.saveOrUpdate(service);

            DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String itemName = (String) tblItems.getValueAt(i, 1);
                float quantity = (float) tblItems.getValueAt(i, 2);
                float subTotal = (float) tblItems.getValueAt(i, 4);
                float discount = (float) tblItems.getValueAt(i, 5);
                float itemTotal = (float) tblItems.getValueAt(i, 6);

                ServiceHasItem serviceHasItem = new ServiceHasItem();
                serviceHasItem.setItem(itemMap.get(itemName));
                serviceHasItem.setService(service);
                serviceHasItem.setQuantity(quantity);
                serviceHasItem.setSubTotal(subTotal);
                serviceHasItem.setDiscount(discount);
                serviceHasItem.setTotal(itemTotal);
                serviceHasItem.setServiceHasItemStatus(this.serviceHasItemStatusMap.get(0));
                serviceHasItem.setCreatedDate(date);
                serviceHasItem.setCreatedTime(date);
                serviceHasItem.setCreatedUser(MainFrame.user.getUserId());
                serviceHasItem.setRemark(itemName);

                serviceHasItemMap.put(itemName, serviceHasItem);

                session.saveOrUpdate(serviceHasItem);
            }

            session.getTransaction().commit();
            session.close();
        }

        InformationDialog.showMessageBox("Updated successfully", "Success");
        this.servicesFrame.loadServices();
    }//GEN-LAST:event_lblSaveMouseClicked

    private void lblSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaveMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblSaveMouseEntered

    private void lblSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaveMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblSaveMouseExited

    private void rbtPercentageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbtPercentageKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_KP_RIGHT) {
            rbtPercentage.setSelected(false);
            rbtNumber.setSelected(true);
            rbtNumber.requestFocus();
        }
    }//GEN-LAST:event_rbtPercentageKeyPressed

    private void rbtNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbtNumberKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_KP_LEFT) {
            rbtNumber.setSelected(false);
            rbtPercentage.setSelected(true);
            rbtPercentage.requestFocus();
        }
    }//GEN-LAST:event_rbtNumberKeyPressed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();

        this.loadVehicles(session);
        this.loadServiceBays(session);
        this.loadItems(session);
        this.loadServiceStatus(session);
        this.loadServiceHasItemStatus(session);

        session.getTransaction().commit();
        session.close();

        if (service == null) {
            this.lblSave.setText("Save");
            cmbVehicle.requestFocus();
            txtServiceStatus.setText("New");
        } else {
            session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();

            cmbVehicle.setSelectedItem(service.getVehicle().getVehicleNumber());
            txtLastServicesMilage.setText("" + service.getMilage());

            lblCustomerName.setText(service.getVehicle().getBusinessPartner().getFirstName() + " " + service.getVehicle().getBusinessPartner().getLastName());
            Set businessAddresses = service.getVehicle().getBusinessPartner().getBusinessAddresses();
            for (Object object : businessAddresses) {
                if (object instanceof BusinessAddress) {
                    BusinessAddress businessAddress = (BusinessAddress) object;
                    Address address = businessAddress.getAddress();
                    lblAddress1.setText(address.getAdressLine1());
                    lblAddress2.setText(address.getAdressLine2());
                    lblAddress3.setText(address.getAdressLine3());
                }
            }

            cmbServiceBay.setSelectedItem(service.getServiceBay().getServiceBayName());
            txtServiceStatus.setText(service.getServiceStatus().getStatusDescription());
            if (service.getServiceStatus().getStatusId() != 1
                    && service.getServiceStatus().getStatusId() != 2
                    && service.getServiceStatus().getStatusId() != 6) {
                lblSettle.setEnabled(true);
            }
            dateServiceDate.setDate(service.getCreatedDate());

            DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
            tableModel.setRowCount(0);
            Set serviceItems = service.getServiceHasItems();

            for (Object object : serviceItems) {
                if (object instanceof ServiceHasItem) {
                    ServiceHasItem serviceItem = (ServiceHasItem) object;
                    Item item = serviceItem.getItem();

                    serviceHasItemMap.put(item.getItemName(), serviceItem);

                    String itemCode = item.getItemCode();
                    String itemName = item.getItemName();
                    float quantity = serviceItem.getQuantity();
                    float unitPrice = item.getSellingPrice();
                    float subTotal = serviceItem.getSubTotal();
                    float discount = serviceItem.getDiscount();
                    float total = serviceItem.getTotal();

                    tableModel.addRow(new Object[]{itemCode, itemName, quantity, unitPrice, subTotal, discount, total});

                    grandSubTotal += subTotal;
                    grandDiscount += discount;
                    grandTotal += total;
                }
            }

            Set invoices = service.getInvoices();
            for (Object object : invoices) {
                if (object instanceof Invoice) {
                    this.invoice = (Invoice) object;
                }
            }

            txtGrandSubTotal.setText("" + grandSubTotal);
            txtGrandDiscount.setText("" + grandDiscount);
            txtGrandTotal.setText("" + grandTotal);

            this.lblSave.setText("Update");

            session.close();

            Timer timer = new Timer();
            timer.schedule(new FocusTimer(), 500);

            getRootPane().setBorder(BorderFactory.createLineBorder(SystemData.BORDER_COLOR, 2));
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void cmbVehicleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbVehicleItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String vehicleNo = (String) cmbVehicle.getSelectedItem();
            if (!vehicleNo.isEmpty()) {
                Vehicle vehicle = vehicleMap.get(vehicleNo);
                BusinessPartner businessPartner = vehicle.getBusinessPartner();
                lblCustomerName.setText(businessPartner.getFirstName() + " " + businessPartner.getLastName());

                Set addresses = businessPartner.getBusinessAddresses();
                if (!addresses.isEmpty()) {
                    for (Object object : addresses) {
                        if (object instanceof BusinessAddress) {
                            BusinessAddress businessAddress = (BusinessAddress) object;
                            Address address = businessAddress.getAddress();
                            this.lblAddress1.setText(address.getAdressLine1());
                            this.lblAddress2.setText(address.getAdressLine2());
                            this.lblAddress3.setText(address.getAdressLine3());
                        }
                    }
                }

                Session session = HibernateUtil.getSessionFactory().openSession();
                session.beginTransaction();

                Query query = session.createQuery("from Service s where s.vehicle.vehicleNumber = :vehicleNumber ");
                query.setParameter("vehicleNumber", vehicle.getVehicleNumber());

                List list = query.list();
                if (!list.isEmpty()) {
                    for (Object object : list) {
                        if (object instanceof Service) {
                            Service tempService = (Service) object;
                            txtLastServicesMilage.setText(tempService.getMilage().toString());
                        }
                    }
                } else {
                    txtLastServicesMilage.setText("");
                }
            }
        }
    }//GEN-LAST:event_cmbVehicleItemStateChanged

    private void txtLastServicesMilageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLastServicesMilageKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbServiceBay.requestFocus();
        }
    }//GEN-LAST:event_txtLastServicesMilageKeyPressed

    private void txtQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantityFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtQuantity.selectAll();
            }
        });
    }//GEN-LAST:event_txtQuantityFocusGained

    private void txtQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtDiscount.requestFocus();
        }
    }//GEN-LAST:event_txtQuantityKeyPressed

    private void tblItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsMouseClicked
        switch (evt.getButton()) {
            case 1:
                if (evt.getClickCount() == 2) {
                    this.ItemEdit();
                }
                break;
            case 3:
                int row = tblItems.rowAtPoint(evt.getPoint());
                int column = tblItems.columnAtPoint(evt.getPoint());
                tblItems.changeSelection(row, column, false, false);
                tblItemPopup.show(evt.getComponent(), evt.getX(), evt.getY());
                break;
            default:
                break;
        }
    }//GEN-LAST:event_tblItemsMouseClicked

    private void cmbVehicleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbVehicleFocusGained
        if (service != null) {
            cmbItems.requestFocus();
        }
    }//GEN-LAST:event_cmbVehicleFocusGained

    private void lblPrintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPrintMouseClicked
        if (service.getInvoices().isEmpty()) {
            KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
            String invoiceCode = keyCodeFunctions.getKey("INV", "Invoices");
            Date date = new Date();

            Session session = HibernateUtil.getSessionFactory().openSession();
            Transaction transaction = session.beginTransaction();

            invoice = new Invoice(invoiceCode, service);
            invoice.setCreatedDate(date);
            invoice.setCreatedTime(date);
            invoice.setCreatedUser(MainFrame.user.getUserId());

            session.saveOrUpdate(invoice);

            Set invoices = new HashSet();
            invoices.add(invoice);

            service.setInvoices(invoices);
            service.setServiceStatus(this.serviceStatusMap.get("INVOICED"));

            session.saveOrUpdate(service);

            transaction.commit();
            session.close();
        }
        JdbcConnection jbConnection = new JdbcConnection();
        Connection connection = jbConnection.getConnection();

        if (connection != null) {
            String reportFile = "reports/invoice.jasper";

            Map map = new HashMap();
            map.put("serviceCode", this.service.getServiceCode());

            try {
                JasperPrint jasperPrint = JasperFillManager.fillReport(reportFile, map, connection);
                JasperViewer.viewReport(jasperPrint, false);
            } catch (JRException ex) {
                Logger.getLogger(ServiceFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jbConnection.closeConnection();
        }

        lblSettle.setEnabled(true);
    }//GEN-LAST:event_lblPrintMouseClicked

    private void lblPrintMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPrintMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblPrintMouseEntered

    private void lblPrintMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPrintMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblPrintMouseExited

    private void lblNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewMouseClicked
        MainFrame.openWindow(MainFrame.allModuleMap.get("Vehicles"));
    }//GEN-LAST:event_lblNewMouseClicked

    private void lblNewMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblNewMouseEntered

    private void lblNewMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblNewMouseExited

    private void lblRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRefreshMouseClicked
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();

        this.loadVehicles(session);

        session.getTransaction().commit();
        session.close();
    }//GEN-LAST:event_lblRefreshMouseClicked

    private void lblRefreshMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRefreshMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblRefreshMouseEntered

    private void lblRefreshMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRefreshMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblRefreshMouseExited

    private void txtDiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            float quantity = Float.parseFloat(txtQuantity.getText().trim());
            if (quantity != 0.0) {
                String itemName = (String) cmbItems.getSelectedItem();
                Item item = itemMap.get(itemName);

                Session session = HibernateUtil.getSessionFactory().openSession();

                Bom bom = (Bom) session.createCriteria(Bom.class)
                        .add(Restrictions.eq("item", item))
                        .uniqueResult();

                if (bom == null) {
                    String itemCode = item.getItemCode();
                    float unitPrice = item.getSellingPrice();
                    float subTotal = quantity * unitPrice;
                    float discount = Float.parseFloat(txtDiscount.getText().trim());
                    float total = 0.0f;
                    if (discount != 0.0) {
                        if (rbtPercentage.isSelected()) {
                            discount = (subTotal * discount) / 100;
                            total = subTotal - discount;
                        } else if (rbtNumber.isSelected()) {
                            total = subTotal - discount;
                        }
                    } else {
                        total = subTotal;
                    }

                    DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
                    tableModel.addRow(new Object[]{itemCode, itemName, quantity, unitPrice, subTotal, discount, total});

                    cmbItems.setSelectedIndex(0);
                    cmbItems.requestFocus();
                    txtQuantity.setText("0.0");
                    txtDiscount.setText("0.0");
                    rbtPercentage.setSelected(true);

                    grandSubTotal += subTotal;
                    grandDiscount += discount;
                    grandTotal += total;

                    txtGrandSubTotal.setText("" + grandSubTotal);
                    txtGrandDiscount.setText("" + grandDiscount);
                    txtGrandTotal.setText("" + grandTotal);
                } else {
                    List<BomItem> bomItems = session.createCriteria(BomItem.class)
                            .add(Restrictions.eq("bom", bom))
                            .addOrder(Order.asc("item.itemCode"))
                            .list();
                    for (BomItem bomItem : bomItems) {
                        Item releventItem = (Item) session.createCriteria(Item.class)
                                .add(Restrictions.eq("itemCode", bomItem.getItem().getItemCode()))
                                .uniqueResult();

                        String itemCode = releventItem.getItemCode();
                        float unitPrice = releventItem.getSellingPrice();
                        float subTotal = quantity * unitPrice;
                        float discount = Float.parseFloat(txtDiscount.getText().trim());
                        float total = 0.0f;
                        if (discount != 0.0) {
                            if (rbtPercentage.isSelected()) {
                                discount = (subTotal * discount) / 100;
                                total = subTotal - discount;
                            } else if (rbtNumber.isSelected()) {
                                total = subTotal - discount;
                            }
                        } else {
                            total = subTotal;
                        }

                        DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
                        tableModel.addRow(new Object[]{itemCode, releventItem.getItemName(), quantity, unitPrice, subTotal, discount, total});

                        cmbItems.setSelectedIndex(0);
                        cmbItems.requestFocus();
                        txtQuantity.setText("0.0");
                        txtDiscount.setText("0.0");
                        rbtPercentage.setSelected(true);

                        grandSubTotal += subTotal;
                        grandDiscount += discount;
                        grandTotal += total;

                        txtGrandSubTotal.setText("" + grandSubTotal);
                        txtGrandDiscount.setText("" + grandDiscount);
                        txtGrandTotal.setText("" + grandTotal);
                    }
                }

                session.close();
            } else {
                JOptionPane.showMessageDialog(this, "Please enter valid quantity.", "Invalid", JOptionPane.INFORMATION_MESSAGE);
                txtQuantity.requestFocus();
            }
        }
    }//GEN-LAST:event_txtDiscountKeyPressed

    private void itemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEditActionPerformed
        this.ItemEdit();
    }//GEN-LAST:event_itemEditActionPerformed

    private void txtDiscountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiscountFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtDiscount.selectAll();
            }
        });
    }//GEN-LAST:event_txtDiscountFocusGained

    private void itemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDeleteActionPerformed
        ServiceStatus status = serviceStatusMap.get(txtServiceStatus.getText().trim());
        if (status.getStatusId() == 1) {
            grandSubTotal = grandSubTotal - (((float) tblItems.getValueAt(tblItems.getSelectedRow(), 2))
                    * ((float) tblItems.getValueAt(tblItems.getSelectedRow(), 3)));
            grandDiscount = grandDiscount - (float) tblItems.getValueAt(tblItems.getSelectedRow(), 5);
            grandTotal = grandSubTotal - grandDiscount;

            txtGrandSubTotal.setText("" + grandSubTotal);
            txtGrandDiscount.setText("" + grandDiscount);
            txtGrandTotal.setText("" + grandTotal);

            DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
            tableModel.removeRow(tblItems.getSelectedRow());
        } else {
            int option = JOptionPane.showConfirmDialog(this, "Are you sure?", "Sure", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                String itemName = (String) tblItems.getValueAt(tblItems.getSelectedRow(), 1);
                ServiceHasItem serviceHasItem = serviceHasItemMap.get(itemName);
                serviceHasItem.setServiceHasItemStatus(this.serviceHasItemStatusMap.get(1));

                Session session = HibernateUtil.getSessionFactory().openSession();
                Transaction transaction = session.beginTransaction();

                ServiceHasItem mergedHasItem = (ServiceHasItem) session.merge(serviceHasItem);
                session.saveOrUpdate(mergedHasItem);

                transaction.commit();
                session.close();

                serviceHasItemMap.remove(itemName);

                DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
                tableModel.removeRow(tblItems.getSelectedRow());

                grandSubTotal = grandSubTotal - (serviceHasItem.getQuantity() * itemMap.get(itemName).getSellingPrice());
                grandDiscount = grandDiscount - serviceHasItem.getDiscount();
                grandTotal = grandSubTotal - grandDiscount;

                txtGrandSubTotal.setText("" + grandSubTotal);
                txtGrandDiscount.setText("" + grandDiscount);
                txtGrandTotal.setText("" + grandTotal);
            }
        }
    }//GEN-LAST:event_itemDeleteActionPerformed

    private void lblSettleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSettleMouseClicked
        SettlementDialog settlementDialog = new SettlementDialog(null, true, service, invoice, this.serviceStatusMap);
        settlementDialog.setVisible(true);
    }//GEN-LAST:event_lblSettleMouseClicked

    private void lblSettleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSettleMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblSettleMouseEntered

    private void lblSettleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSettleMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblSettleMouseExited

    private void loadVehicles(Session session) {

        Query query = session.createQuery("from Vehicle v order by v.vehicleNumber");
        List list = query.list();
        if (!list.isEmpty()) {
            cmbVehicle.removeAllItems();
            cmbVehicle.addItem("");
            for (Object object : list) {
                if (object instanceof Vehicle) {
                    Vehicle vehicle = (Vehicle) object;
                    String vehicleNo = vehicle.getVehicleNumber();

                    BusinessPartner businessPartner = vehicle.getBusinessPartner();
                    Hibernate.initialize(businessPartner);

                    Set addresses = businessPartner.getBusinessAddresses();
                    for (Object tempAddresse : addresses) {
                        if (tempAddresse instanceof BusinessAddress) {
                            BusinessAddress businessAddress = (BusinessAddress) tempAddresse;
                            Hibernate.initialize(businessAddress.getAddress());
                        }
                    }

                    Set businessTelephone = businessPartner.getBusinessTelephones();
                    for (Object tempTelephone : businessTelephone) {
                        if (tempTelephone instanceof BusinessTelephone) {
                            BusinessTelephone telephone = (BusinessTelephone) tempTelephone;
                            Hibernate.initialize(telephone.getTelephoneNumber());
                        }
                    }

                    cmbVehicle.addItem(vehicleNo);
                    vehicleMap.put(vehicleNo, vehicle);
                }
            }
        }
    }

    private void loadItems(Session session) {
        cmbItems.removeAllItems();
        cmbItems.addItem("");
        Query query = session.createQuery("from Item i order by i.itemName");
        List list = query.list();
        if (!list.isEmpty()) {
            for (Object object : list) {
                if (object instanceof Item) {
                    Item item = (Item) object;
                    String itemName = item.getItemName();
                    cmbItems.addItem(itemName);
                    itemMap.put(itemName, item);
                }
            }
        }
    }

    private void loadServiceBays(Session session) {
        cmbServiceBay.removeAllItems();
        cmbServiceBay.addItem("");
        Query query = session.createQuery("from ServiceBay sb order by sb.serviceBayCode");
        List list = query.list();
        if (!list.isEmpty()) {
            for (Object object : list) {
                if (object instanceof ServiceBay) {
                    ServiceBay serviceBay = (ServiceBay) object;
                    String serviceBayName = serviceBay.getServiceBayName();
                    cmbServiceBay.addItem(serviceBayName);
                    serviceBayMap.put(serviceBayName, serviceBay);
                }
            }
        }
    }

    private void loadServiceStatus(Session session) {
        Query query = session.createQuery("from ServiceStatus ss order by ss.statusId");
        List list = query.list();
        if (!list.isEmpty()) {
            for (Object object : list) {
                if (object instanceof ServiceStatus) {
                    ServiceStatus serviceStatus = (ServiceStatus) object;
                    String description = serviceStatus.getStatusDescription();
                    serviceStatusMap.put(description, serviceStatus);
                }
            }
        }
    }

    private void loadServiceHasItemStatus(Session session) {
        Query query = session.createQuery("from ServiceHasItemStatus ss order by ss.itemStatusId");
        List list = query.list();
        if (!list.isEmpty()) {
            for (Object object : list) {
                if (object instanceof ServiceHasItemStatus) {
                    ServiceHasItemStatus serviceHasItemStatus = (ServiceHasItemStatus) object;
                    int id = serviceHasItemStatus.getItemStatusId();
                    serviceHasItemStatusMap.put(id, serviceHasItemStatus);
                }
            }
        }
    }

    private void resetWindow() {
        cmbVehicle.setSelectedIndex(0);
        txtLastServicesMilage.setText("");
        lblCustomerName.setText("");
        lblAddress1.setText("");
        lblAddress2.setText("");
        lblAddress3.setText("");

        cmbServiceBay.setSelectedIndex(0);
        txtGrandSubTotal.setText("0.00");
        txtGrandDiscount.setText("0.00");
        txtGrandTotal.setText("0.00");

        cmbItems.setSelectedIndex(0);
        txtQuantity.setText("0.00");
        txtDiscount.setText("0.00");
        rbtPercentage.setSelected(true);

        DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
        tableModel.setRowCount(0);
    }

    private void ItemEdit() {
        int row = tblItems.getSelectedRow();
        if (row != -1) {
            String itemName = (String) tblItems.getValueAt(row, 1);
            float quantity = (Float) tblItems.getValueAt(row, 2);
            float unitPrice = (Float) tblItems.getValueAt(row, 3);
            float discount = (Float) tblItems.getValueAt(row, 5);

            cmbItems.setSelectedItem(itemName);
            txtQuantity.setText("" + quantity);
            txtDiscount.setText("0.0");

            DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
            tableModel.removeRow(row);

            float totalItemAmount = unitPrice * quantity;
            grandSubTotal = grandSubTotal - totalItemAmount;
            grandDiscount = grandDiscount - discount;
            grandTotal = grandSubTotal - grandDiscount;

            txtGrandSubTotal.setText("" + grandSubTotal);
            txtGrandDiscount.setText("" + grandDiscount);
            txtGrandTotal.setText("" + grandTotal);

            cmbItems.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid item.", "Invalid", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ServiceDetailPanel;
    private javax.swing.JPanel buttonPanel;
    public static javax.swing.JComboBox<String> cmbItems;
    private javax.swing.JComboBox<String> cmbServiceBay;
    private javax.swing.JComboBox<String> cmbVehicle;
    private javax.swing.JPanel customerDetailPanel;
    private com.toedter.calendar.JDateChooser dateServiceDate;
    private javax.swing.JPanel detailPanel;
    private javax.swing.ButtonGroup discountGroup;
    private javax.swing.JMenuItem itemDelete;
    private javax.swing.JMenuItem itemEdit;
    private javax.swing.JPanel itemPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress1;
    private javax.swing.JLabel lblAddress2;
    private javax.swing.JLabel lblAddress3;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblNew;
    private javax.swing.JLabel lblPrint;
    private javax.swing.JLabel lblRefresh;
    private javax.swing.JLabel lblSave;
    private javax.swing.JLabel lblSettle;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton rbtNumber;
    private javax.swing.JRadioButton rbtPercentage;
    private javax.swing.JPopupMenu tblItemPopup;
    private javax.swing.JTable tblItems;
    private javax.swing.JFormattedTextField txtDiscount;
    private javax.swing.JFormattedTextField txtGrandDiscount;
    private javax.swing.JFormattedTextField txtGrandSubTotal;
    private javax.swing.JFormattedTextField txtGrandTotal;
    private javax.swing.JTextField txtLastServicesMilage;
    private javax.swing.JFormattedTextField txtQuantity;
    private javax.swing.JTextField txtServiceStatus;
    private javax.swing.JPanel vehicleDetailPanel;
    // End of variables declaration//GEN-END:variables
    private Service service;
    private Invoice invoice;
    private final TreeMap<String, Vehicle> vehicleMap = new TreeMap<>();
    private final TreeMap<String, ServiceBay> serviceBayMap = new TreeMap<>();
    private final TreeMap<String, Item> itemMap = new TreeMap<>();
    private final TreeMap<String, ServiceStatus> serviceStatusMap = new TreeMap<>();
    private final TreeMap<String, ServiceHasItem> serviceHasItemMap = new TreeMap<>();
    private final TreeMap<Integer, ServiceHasItemStatus> serviceHasItemStatusMap = new TreeMap<>();

    private float grandSubTotal = 0.0f;
    private float grandTotal = 0.0f;
    private float grandDiscount = 0.0f;
}
