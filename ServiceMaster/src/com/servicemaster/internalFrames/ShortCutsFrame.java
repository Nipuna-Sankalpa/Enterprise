/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.servicemaster.internalFrames;

import com.servicemaster.data.SystemData;
import com.servicemaster.dialogs.ConfirmationDialog;
import com.servicemaster.forms.MainFrame;
import com.servicemaster.guiFunctions.LableFunctions;
import com.servicemaster.models.Module;
import com.servicemaster.utils.HibernateUtil;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListModel;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author Ruwan Madawala
 */
public class ShortCutsFrame extends javax.swing.JInternalFrame {

    private final MainFrame mainFrame;

    /**
     * Creates new form ShortCuts
     *
     * @param mainFrame
     */
    public ShortCutsFrame(MainFrame mainFrame) {
        initComponents();
        this.mainFrame = mainFrame;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelAvailable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listAvailable = new javax.swing.JList();
        panelAdded = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAdded = new javax.swing.JList();
        lblAdd = new javax.swing.JLabel();
        lblRemove = new javax.swing.JLabel();
        lblClose = new javax.swing.JLabel();
        lblOK = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Shortcuts");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panelAvailable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)), "Available Modules", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 0, 10), java.awt.Color.blue)); // NOI18N
        panelAvailable.setLayout(new java.awt.BorderLayout());

        listAvailable.setToolTipText("");
        jScrollPane1.setViewportView(listAvailable);

        panelAvailable.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelAdded.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)), "Already added modules", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 0, 10), java.awt.Color.blue)); // NOI18N
        panelAdded.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setViewportView(listAdded);

        panelAdded.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        lblAdd.setBackground(new java.awt.Color(150, 255, 150));
        lblAdd.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        lblAdd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/right_arrow.png"))); // NOI18N
        lblAdd.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblAdd.setOpaque(true);
        lblAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblAddMouseExited(evt);
            }
        });

        lblRemove.setBackground(new java.awt.Color(150, 255, 150));
        lblRemove.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        lblRemove.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/left_arrow.png"))); // NOI18N
        lblRemove.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblRemove.setOpaque(true);
        lblRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRemoveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblRemoveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblRemoveMouseExited(evt);
            }
        });

        lblClose.setBackground(new java.awt.Color(150, 255, 150));
        lblClose.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblClose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClose.setText("Close");
        lblClose.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblClose.setOpaque(true);
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblCloseMouseExited(evt);
            }
        });

        lblOK.setBackground(new java.awt.Color(150, 255, 150));
        lblOK.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblOK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOK.setText("OK");
        lblOK.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        lblOK.setOpaque(true);
        lblOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblOKMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblOKMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblOKMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblOK, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(panelAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelAdded, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {panelAdded, panelAvailable});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAdd, lblClose, lblOK, lblRemove});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(lblAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelAdded, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOK, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {panelAdded, panelAvailable});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblAdd, lblClose, lblOK, lblRemove});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setBounds(0, 0, 558, 358);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        DefaultListModel<String> availableModel = new DefaultListModel<>();
        DefaultListModel<String> addedModel = new DefaultListModel<>();

        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query query = session.createQuery("from Module m where m.isShortcutAdded = 0");
        List objectList = query.list();
        if (!objectList.isEmpty()) {
            for (int i = 0; i < objectList.size(); i++) {
                if (objectList.get(i) instanceof Module) {
                    Module module = (Module) objectList.get(i);
                    String moduleName = module.getModuleName();
                    availableModel.add(i, moduleName);
                }
            }
        }

        query = session.createQuery("from Module m where m.isShortcutAdded = 1");
        objectList = query.list();
        if (!objectList.isEmpty()) {
            for (int i = 0; i < objectList.size(); i++) {
                if (objectList.get(i) instanceof Module) {
                    Module module = (Module) objectList.get(i);
                    String moduleName = module.getModuleName();
                    addedModel.add(i, moduleName);
                }
            }
        }
        session.getTransaction().commit();
        session.close();

        listAvailable.setModel(availableModel);
        listAdded.setModel(addedModel);
    }//GEN-LAST:event_formInternalFrameOpened

    private void lblAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseClicked
        int[] selectedIndices = listAvailable.getSelectedIndices();
        DefaultListModel availableModel = (DefaultListModel) listAvailable.getModel();
        for (int i = 0; i < selectedIndices.length; i++) {
            int index = selectedIndices[i];

            String value = (String) availableModel.get(index);

            DefaultListModel addedModel = (DefaultListModel) listAdded.getModel();
            addedModel.add(addedModel.getSize(), value);
        }

        for (int i = (selectedIndices.length - 1); i > -1; i--) {
            int index = selectedIndices[i];
            availableModel.remove(index);
        }
    }//GEN-LAST:event_lblAddMouseClicked

    private void lblAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblAddMouseEntered

    private void lblAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblAddMouseExited

    private void lblRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRemoveMouseClicked
        int[] selectedIndices = listAdded.getSelectedIndices();
        DefaultListModel addedModel = (DefaultListModel) listAdded.getModel();
        for (int i = 0; i < selectedIndices.length; i++) {
            int index = selectedIndices[i];

            String value = (String) addedModel.get(index);

            DefaultListModel availableModel = (DefaultListModel) listAvailable.getModel();
            availableModel.add(availableModel.getSize(), value);
        }

        for (int i = (selectedIndices.length - 1); i > -1; i--) {
            int index = selectedIndices[i];
            addedModel.remove(index);
        }
    }//GEN-LAST:event_lblRemoveMouseClicked

    private void lblRemoveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRemoveMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblRemoveMouseEntered

    private void lblRemoveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRemoveMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblRemoveMouseExited

    private void lblCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseClicked
        ConfirmationDialog.showMessageBox("Are you sure?", "Sure");
        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_lblCloseMouseClicked

    private void lblCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblCloseMouseEntered

    private void lblCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblCloseMouseExited

    private void lblOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOKMouseClicked
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();

        DefaultListModel<String> model = (DefaultListModel<String>) listAdded.getModel();
        if (!model.isEmpty()) {
            mainFrame.panelShortcuts.removeAll();
            Object[] array = model.toArray();
            for (Object value : array) {
                if (value instanceof String) {
                    mainFrame.addShortCuts(value.toString());
                    HashMap<String,Object> map =  MainFrame.allModuleMap.get(value.toString());

                    Module module = (Module) session.load(Module.class, Integer.parseInt((String) map.get("ModuleCode")));
                    module.setIsShortcutAdded(1);
                    module.setModifiedDate(new Date());
                    module.setModifiedTime(new Date());
                    module.setModifiedUser(MainFrame.user.getUserId());
                    session.saveOrUpdate(module);
                }
            }
            mainFrame.panelShortcuts.revalidate();
            mainFrame.panelShortcuts.repaint();
        } else {
            mainFrame.panelShortcuts.removeAll();
            mainFrame.panelShortcuts.revalidate();
            mainFrame.panelShortcuts.repaint();
        }

        model = (DefaultListModel<String>) listAvailable.getModel();
        if (!model.isEmpty()) {
            Object[] array = model.toArray();
            for (Object value : array) {
                if (value instanceof String) {
                    HashMap<String,Object> map =  MainFrame.allModuleMap.get(value.toString());
                    
                    Module module = (Module) session.load(Module.class, Integer.parseInt((String) map.get("ModuleCode")));
                    module.setIsShortcutAdded(0);
                    module.setModifiedDate(new Date());
                    module.setModifiedTime(new Date());
                    module.setModifiedUser(MainFrame.user.getUserId());
                    session.saveOrUpdate(module);
                }
            }
        }

        session.getTransaction().commit();
        session.close();
    }//GEN-LAST:event_lblOKMouseClicked

    private void lblOKMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOKMouseEntered
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_lblOKMouseEntered

    private void lblOKMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOKMouseExited
        LableFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_lblOKMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAdd;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblOK;
    private javax.swing.JLabel lblRemove;
    private javax.swing.JList listAdded;
    private javax.swing.JList listAvailable;
    private javax.swing.JPanel panelAdded;
    private javax.swing.JPanel panelAvailable;
    // End of variables declaration//GEN-END:variables
}
